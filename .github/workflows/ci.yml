name: CI and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            platform: linux
            artifact: tspp-linux-x64
            cc: gcc-11
            cxx: g++-11
          - os: windows-latest
            platform: windows
            artifact: tspp-windows-x64
            cc: cl
            cxx: cl
          - os: macos-latest
            platform: macos
            artifact: tspp-macos-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        
        # Install LLVM 17
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-17 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y llvm-17 llvm-17-dev llvm-17-tools clang-17
        
        # Install Boehm GC and other dependencies
        sudo apt-get install -y libgc-dev libedit-dev libcurl4-openssl-dev

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Install LLVM for Windows
        $llvmUrl = "https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64.exe"
        $llvmInstaller = "$env:TEMP\llvm-installer.exe"
        Invoke-WebRequest -Uri $llvmUrl -OutFile $llvmInstaller
        Start-Process -FilePath $llvmInstaller -ArgumentList "/S" -Wait
        
        # Add LLVM to PATH
        $llvmPath = "C:\Program Files\LLVM\bin"
        echo "$llvmPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install llvm@17 cmake bdw-gc
        echo "/opt/homebrew/opt/llvm@17/bin" >> $GITHUB_PATH
        echo "LLVM_DIR=/opt/homebrew/opt/llvm@17" >> $GITHUB_ENV

    - name: Setup environment (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
        echo "LLVM_DIR=/usr/lib/llvm-17" >> $GITHUB_ENV
        echo "/usr/lib/llvm-17/bin" >> $GITHUB_PATH

    - name: Setup environment (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "LLVM_DIR=C:\Program Files\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Verify dependencies
      shell: bash
      run: |
        cmake --version
        if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
          llvm-config --version || llvm-config-17 --version
        else
          clang --version
        fi

    - name: Build project
      shell: bash
      run: |
        chmod +x build.sh
        ./build.sh

    - name: Verify build artifacts
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ls -la build/src/
          file build/src/tspp.exe || true
        else
          ls -la build/src/
          file build/src/tspp
          build/src/tspp --version || echo "Version command not implemented yet"
        fi

    - name: Run basic tests
      shell: bash
      run: |
        chmod +x test.sh
        
        # Create a simple test file
        echo 'func main() { println("Hello, TSPP!"); }' > simple_test.tspp
        
        # Test compilation (allow for the fact that the test might not produce output)
        ./test.sh simple_test.tspp || echo "Test completed with exit code $?"
        
        # Clean up
        rm -f simple_test.tspp simple_test.tspp.ll temp_exec temp.bc

    - name: Package binary
      shell: bash
      run: |
        mkdir -p dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp build/src/tspp.exe dist/
          cp README.md dist/
          cd dist && zip -r ../${{ matrix.artifact }}.zip .
        else
          cp build/src/tspp dist/
          cp README.md dist/
          cd dist && tar -czf ../${{ matrix.artifact }}.tar.gz .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          ${{ matrix.artifact }}.zip
          ${{ matrix.artifact }}.tar.gz
        if-no-files-found: ignore

  code-quality:
    name: Code Quality
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-14

    - name: Check code formatting
      run: |
        if [ -f ".clang-format" ]; then
          echo "Checking code formatting..."
          find src -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | xargs clang-format-14 --dry-run --Werror
        else
          echo "No .clang-format file found, skipping format check"
        fi

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" src/ --include="*.cpp" --include="*.h" --include="*.hpp"; then
          echo "Found TODO/FIXME comments (informational only)"
        else
          echo "No TODO/FIXME comments found"
        fi

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-and-test, code-quality]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          tspp-linux-x64/*.tar.gz
          tspp-windows-x64/*.zip
          tspp-macos-x64/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}