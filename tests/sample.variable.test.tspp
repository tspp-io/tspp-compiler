// ---------- Type Declarations ----------
typedef ID = int;
type Coord<T extends float> = { x: T; y: T };

// ---------- Variable Declarations ----------

// Basic types
let a: int = 42;
const b: float = 3.14;
let c: bool = true;
let d: string = "Hello";

// VarModifiers
#stack let e: int = 10;         // Stack-allocated int
#heap const f: float = 9.81;    // Heap-allocated const float
#static let g: bool = false;    // Static storage duration

// Union type
let h: int | string = "either";

// Intersection type
let i: { name: string } & { id: int } = { name: "John", id: 1 };

// Grouped types
let j: (int | float) & { unit: string } = { unit: "m", 0: 5.5 } as any;

// Pointer types
let k: int* = null;
let l: @unsafe float* = null;
let m: @aligned string* = null;

// Smart pointer types
let n: #shared<int> = null;
let o: #unique<Coord<float>> = null;
let p: #weak<#shared<string>> = null;

// Identifier type without type args
let q: ID = 100;

// Identifier type with type arguments
let r: Coord<float> = { x: 1.1, y: 2.2 };

// Multiple modifiers with initialization
#heap const s: int | float = 5.5;

// Without initialization
let t: bool = false;

// ---------- Main Function ----------
function main(): int {
  console.log("a: ", a); // a: 42
  console.log("b: ", b); // b: 3.14
  console.log("c: ", c); // c: true
  console.log("d: ", d); // d: Hello
  console.log("e: ", e); // e: 10
  console.log("f: ", f); // f: 9.81
  console.log("g: ", g); // g: false
  console.log("h: ", h); // h: either
  console.log("i: ", i); // i: { name: "John", id: 1 }
  console.log("j: ", j); // j: { unit: "m", 0: 5.5 }
  console.log("k: ", k); // k: null
  console.log("l: ", l); // l: null
  console.log("m: ", m); // m: null
  console.log("n: ", n); // n: null
  console.log("o: ", o); // o: null
  console.log("p: ", p); // p: null
  console.log("q: ", q); // q: 100
  console.log("r: ", r); // r: { x: 1.1, y: 2.2 }
  console.log("s: ", s); // s: 5.5
  console.log("t: ", t); // t: false
  return 0;
}
