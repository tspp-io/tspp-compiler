// ================================
// Classes + Interfaces Coverage
// ================================

// ---------- Type Aliases ----------
typedef Meter = float;
typedef ID = int;
typedef StringOrInt = string | int;

// ---------- Interfaces ----------
interface IPoint {
  x: float;
  y: float;
  toString(): string;
  move(dx: float, dy: float): void;
}

interface Box<T> {
  value: T;
  get(): T;
  set(v: T): void;
}

interface Printer {
  print(): void;
}

// ---------- Classes implementing Interfaces ----------
class Point implements IPoint {
  public let x: float;
  public let y: float;

  constructor(x: float, y: float) {
    this.x = x;
    this.y = y;
  }

  function toString(): string {
    return "(" + this.x + ", " + this.y + ")";
  }

  function move(dx: float, dy: float): void {
    this.x = this.x + dx;
    this.y = this.y + dy;
  }
}

class SBox<T> implements Box<T> {
  public let value: T;

  constructor(v: T) {
    this.value = v;
  }

  function get(): T {
    return this.value;
  }

  function set(v: T): void {
    this.value = v;
  }
}

class ConsolePrinter implements Printer {
  #heap let prefix: string;

  constructor(prefix: string) {
    this.prefix = prefix;
  }

  public function print(): void {
    console.log(this.prefix + " printing..."); // Expected: [INFO] printing...
  }
}

// ---------- Base/Derived + Static Block ----------
class Animal {
  public let name: string;

  constructor(name: string) {
    this.name = name;
  }

  function speak(): string {
    return this.name + " makes a sound";
  }

  static function kingdom(): string {
    return "Animalia";
  }

  static {
    console.log("Static block in Animal executed"); // Expected: Static block in Animal executed
  }
}

class Dog extends Animal {
  private let breed: string;

  constructor(name: string, breed: string) {
    super(name);
    this.breed = breed;
  }

  public override function speak(): string {
    return this.name + " barks (" + this.breed + ")";
  }

  function getBreed(): string {
    return this.breed;
  }
}

// ---------- Abstract/Final/Packed ----------
#abstract class Shape {
  function area(): float; // abstract
}

#final class Circle extends Shape {
  private let radius: float;

  constructor(r: float) {
    this.radius = r;
  }

  public override function area(): float {
    return 3.14 * this.radius * this.radius;
  }
}

#packed class ByteArray {
  public let data: int[];

  constructor(size: int) {
    this.data = new int[size];
  }

  function set(index: int, value: int): void {
    this.data[index] = value;
  }

  function get(index: int): int {
    return this.data[index];
  }
}

// ---------- Interface-typed helper functions ----------
function stringifyPoint(pt: IPoint): string {
  // Calls interface method + member access
  return "Point" + pt.toString();
}

function useBoxString(bx: Box<string>): string {
  // If your implementation returns addresses, your runtime is treating string as a pointer.
  // Make sure string is a value type or that toString() is applied in concatenation.
  bx.set(bx.get() + "!");
  return bx.get();
}

// ---------- Misc helpers (statements/expressions) ----------
function isEven(n: int): bool {
  return (n % 2) == 0;
}

function sumTo(n: int): int {
  let s: int = 0;
  let i: int = 1;
  while (i <= n) {
    s = s + i;
    i = i + 1;
  }
  return s;
}

function forVariants(): int {
  let total: int = 0;

  // (1) VariableDecl ForInit
  for (let i: int = 0; i < 3; i = i + 1) {
    total = total + i; // adds 0+1+2 = 3
  }

  // (2) Expression ForInit
  let j: int = 0;
  for (j = 0; j < 2; j = j + 1) {
    total = total + 10; // adds 20
  }

  // (3) Empty ForInit
  let k: int = 0;
  for (; k < 2; k = k + 1) {
    total = total + 100; // adds 200
  }

  return total; // 223
}

function precedenceDemo(): int {
  let a: int = 5; // 0101
  let b: int = 3; // 0011

  let addMul: int = 2 + 3 * 4;      // 14
  let shiftMix: int = (1 + 1) << 3; // 16
  let band: int = a & b;            // 1
  let bor: int = a | b;             // 7
  let bxor: int = a ^ b;            // 6
  let not0: int = ~0;               // -1
  let eq: bool = (addMul == 14);    // true
  let rel: bool = (shiftMix >= 16); // true
  let logic: bool = (eq && rel) || false; // true

  let sum: int = addMul + shiftMix + band + bor + bxor + not0 + (logic ? 1 : 0);
  return sum; // 44
}

function memberAndIndexAccess(): int {
  let p: Point = new Point(1.0, 2.0);
  p.move(1.0, 3.0); // (2.0, 5.0)

  let arr: int[] = [10, 20, 30];
  arr[1] = arr[1] + 79; // 99

  // Avoid casting floats to int; just use array sum (stable int)
  let chk: int = (arr[0] + arr[1] + arr[2]); // 10 + 99 + 30 = 139
  return chk + 2 + 5; // add p.x (2) + p.y (5) -> 146
}

// ---------- Main ----------
function main(): int {
  // TypeAlias usage
  let dist: Meter = 3.5;
  let ident: ID = 42;
  let flexible: StringOrInt = "ok";

  console.log("dist: ", dist);                     // Expected: dist: 3.5
  console.log("ident: ", ident);                   // Expected: ident: 42
  console.log("flexible: ", flexible);             // Expected: flexible: ok

  // Interfaces via classes + NewExpr
  let p1: Point = new Point(1.5, 2.5);
  console.log("p1: ", p1.toString());              // Expected: p1: (1.5, 2.5)
  p1.move(0.5, 0.5);
  console.log("p1 moved: ", p1.toString());        // Expected: p1 moved: (2, 3)

  // Interface-typed function usage (interfaces!)
  console.log("stringifyPoint(p1): ", stringifyPoint(p1)); // Expected: stringifyPoint(p1): Point(2, 3)

  let sb: SBox<string> = new SBox<string>("hi");
  console.log("useBoxString(sb): ", useBoxString(sb));     // Expected: useBoxString(sb): hi!

  // Base/Derived + static
  let a: Animal = new Animal("Generic");
  console.log("a.speak(): ", a.speak());           // Expected: a.speak(): Generic makes a sound
  console.log("Animal.kingdom(): ", Animal.kingdom()); // Expected: Animal.kingdom(): Animalia

  let d: Dog = new Dog("Rex", "Labrador");
  console.log("d.speak(): ", d.speak());           // Expected: d.speak(): Rex barks (Labrador)
  console.log("d.getBreed(): ", d.getBreed());     // Expected: d.getBreed(): Labrador

  // Printer interface
  let pr: ConsolePrinter = new ConsolePrinter("[INFO]");
  pr.print();                                       // Expected: [INFO] printing...

  // Abstract/Final
  let c: Circle = new Circle(2.0);
  console.log("c.area(): ", c.area());             // Expected: c.area(): 12.56

  // Packed
  let ba: ByteArray = new ByteArray(3);
  ba.set(0, 42);
  console.log("ba.get(0): ", ba.get(0));           // Expected: ba.get(0): 42

  // Statements/expressions pack (matches your earlier outputs)
  let n: int = 6;
  console.log("isEven(6): ", isEven(n));           // Expected: isEven(6): true
  console.log("sumTo(5): ", sumTo(5));             // Expected: sumTo(5): 15
  console.log("forVariants(): ", forVariants());   // Expected: forVariants(): 223
  console.log("precedenceDemo(): ", precedenceDemo()); // Expected: precedenceDemo(): 44
  console.log("memberAndIndexAccess(): ", memberAndIndexAccess()); // Expected: memberAndIndexAccess(): 146

  // Assignment associativity
  let x: int = 0;
  let y: int = 0;
  x = y = 5;
  console.log("x: ", x);                           // Expected: x: 5
  console.log("y: ", y);                           // Expected: y: 5

  // Logic & shifts
  let L: bool = (false && (1/0 == 0)) || true;
  console.log("logical: ", L);                     // Expected: logical: true
  console.log("1<<3: ", 1 << 3);                   // Expected: 1<<3: 8
  console.log("8>>1: ", 8 >> 1);                   // Expected: 8>>1: 4
  console.log("~0: ", ~0);                         // Expected: ~0: -1

  return 0;
}
